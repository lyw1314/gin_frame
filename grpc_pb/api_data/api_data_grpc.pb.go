// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.17.3
// source: pb/api_data.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ApiDataClient is the client API for ApiData service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ApiDataClient interface {
	// 根据appID获取信息
	AuthGetOne(ctx context.Context, in *AuthGetOneRequest, opts ...grpc.CallOption) (*AuthGetOneResponse, error)
	// 限流器，单个请求
	LimiterAllow(ctx context.Context, in *AllowRequest, opts ...grpc.CallOption) (*AllowResponse, error)
}

type apiDataClient struct {
	cc grpc.ClientConnInterface
}

func NewApiDataClient(cc grpc.ClientConnInterface) ApiDataClient {
	return &apiDataClient{cc}
}

func (c *apiDataClient) AuthGetOne(ctx context.Context, in *AuthGetOneRequest, opts ...grpc.CallOption) (*AuthGetOneResponse, error) {
	out := new(AuthGetOneResponse)
	err := c.cc.Invoke(ctx, "/pb.ApiData/AuthGetOne", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiDataClient) LimiterAllow(ctx context.Context, in *AllowRequest, opts ...grpc.CallOption) (*AllowResponse, error) {
	out := new(AllowResponse)
	err := c.cc.Invoke(ctx, "/pb.ApiData/LimiterAllow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ApiDataServer is the server API for ApiData service.
// All implementations must embed UnimplementedApiDataServer
// for forward compatibility
type ApiDataServer interface {
	// 根据appID获取信息
	AuthGetOne(context.Context, *AuthGetOneRequest) (*AuthGetOneResponse, error)
	// 限流器，单个请求
	LimiterAllow(context.Context, *AllowRequest) (*AllowResponse, error)
	mustEmbedUnimplementedApiDataServer()
}

// UnimplementedApiDataServer must be embedded to have forward compatible implementations.
type UnimplementedApiDataServer struct {
}

func (UnimplementedApiDataServer) AuthGetOne(context.Context, *AuthGetOneRequest) (*AuthGetOneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthGetOne not implemented")
}
func (UnimplementedApiDataServer) LimiterAllow(context.Context, *AllowRequest) (*AllowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LimiterAllow not implemented")
}
func (UnimplementedApiDataServer) mustEmbedUnimplementedApiDataServer() {}

// UnsafeApiDataServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ApiDataServer will
// result in compilation errors.
type UnsafeApiDataServer interface {
	mustEmbedUnimplementedApiDataServer()
}

func RegisterApiDataServer(s grpc.ServiceRegistrar, srv ApiDataServer) {
	s.RegisterService(&ApiData_ServiceDesc, srv)
}

func _ApiData_AuthGetOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthGetOneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiDataServer).AuthGetOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ApiData/AuthGetOne",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiDataServer).AuthGetOne(ctx, req.(*AuthGetOneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiData_LimiterAllow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiDataServer).LimiterAllow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ApiData/LimiterAllow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiDataServer).LimiterAllow(ctx, req.(*AllowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ApiData_ServiceDesc is the grpc.ServiceDesc for ApiData service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ApiData_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.ApiData",
	HandlerType: (*ApiDataServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AuthGetOne",
			Handler:    _ApiData_AuthGetOne_Handler,
		},
		{
			MethodName: "LimiterAllow",
			Handler:    _ApiData_LimiterAllow_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/api_data.proto",
}
